// Generated by CoffeeScript 1.10.0
(function() {
  var METRICS, UNITS, chartOptions, fmt_time, make_csv, make_download;

  window.UNITS = UNITS = {
    TempF: function(val) {
      return "<b>" + (val.toFixed(2)) + "</b>F (<b>" + (((val - 32) * 5 / 9).toFixed(2)) + "</b>C)";
    },
    Gal: function(val) {
      return "<b>" + (val.toFixed(1)) + "</b>Gal (<b>" + ((val * 3.7854118).toFixed(0)) + "</b>L)";
    },
    Pct: function(val) {
      return "<b>" + (val.toFixed(2)) + "</b>%";
    }
  };

  window.METRICS = METRICS = [
    {
      metric: 'R1_TOP_AVG_CAL',
      name: 'Reactor Temp1',
      units: UNITS.TempF
    }, {
      metric: 'R1_BOT_AVG_CAL',
      name: 'Reactor Temp2',
      units: UNITS.TempF
    }, {
      metric: 'T1_VOLUME',
      name: 'Rector Volume',
      scale: 0.1,
      units: UNITS.Gal
    }, {
      metric: 'R2_BOT_AVG_CAL',
      name: 'Ambient Temp',
      units: UNITS.TempF
    }, {
      metric: 'R1_MID_AVG_CAL',
      name: 'Heat Xchange Temp',
      units: UNITS.TempF
    }, {
      metric: 'HEATER_OUTPUT_AVERAGE',
      name: '% Heater Load',
      units: UNITS.Pct
    }
  ];

  window.chartOptions = chartOptions = {
    rangeSelector: {
      buttons: [
        {
          type: 'hour',
          count: 6,
          text: '6h'
        }, {
          type: 'day',
          count: 1,
          text: '1d'
        }, {
          type: 'week',
          count: 1,
          text: '1w'
        }, {
          type: 'month',
          count: 1,
          text: '1m'
        }, {
          type: 'month',
          count: 3,
          text: '3m'
        }, {
          type: 'all',
          count: 1,
          text: 'All'
        }
      ],
      inputBoxWidth: 130,
      inputDateFormat: '%Y-%m-%d %H:%M',
      inputEditDateFormat: '%Y-%m-%d %H:%M',
      selected: 0
    },
    title: {
      text: 'Temperatures'
    },
    tooltip: {
      pointFormatter: function() {
        var opts, point, valstr, y;
        point = this;
        y = point.y;
        opts = point.series.options;
        if (opts.scale) {
          y /= opts.scale;
        }
        valstr = opts.units(y);
        return "<span style=\"color:" + point.color + "\">\u25CF</span> " + opts.name + ": " + valstr + "<br/>";
      }
    },
    series: METRICS,
    yAxis: {
      min: 40.0,
      max: 180.0
    }
  };

  window.$(function() {
    var el, html, j, len, n_done;
    n_done = 0;
    console.log("Fetching data");
    $.each(METRICS, function(i, thing) {
      return $.getJSON('/data.jsonp?metric=' + thing.metric + '&callback=?', function(data) {
        var _, idx, j, len;
        console.log("Has data: ", thing.metric);
        if (thing.scale) {
          for (idx = j = 0, len = data.length; j < len; idx = ++j) {
            _ = data[idx];
            data[idx][1] *= thing.scale;
          }
        }
        thing.data = data;
        if (++n_done === METRICS.length) {
          return createChart();
        }
      });
    });
    $('body').append($('<div id="series-selector"></div>'));
    html = "";
    for (j = 0, len = METRICS.length; j < len; j++) {
      el = METRICS[j];
      html += '<input type="checkbox" id="' + el.metric + '">' + el.metric + '</input><br>';
    }
    $('#container').height('600px');
    return Highcharts.setOptions({
      global: {
        useUTC: false
      }
    });
  });

  $('body').append('<div id="current_data"></div>');

  window.createChart = function() {
    var j, len, m, ref, t, text, v, valstr;
    console.log("CREATE_CHART");
    $('#container').highcharts('StockChart', chartOptions);
    $('#export').append('<button type="button">Generate CSV Export</button>');
    $('#export').append('<div id="download_link"></div>');
    $('#export button').click(make_download);
    text = "";
    for (j = 0, len = METRICS.length; j < len; j++) {
      m = METRICS[j];
      ref = m.data[-1], t = ref[0], v = ref[1];
      if (m.scale) {
        v /= m.scale;
      }
      valstr = m.units(y);
      text += "<span style=\"color:" + point.color + "\">\u25CF</span> " + opts.name + ": " + valstr + "<br/>";
    }
    return $('#current_data').html(text);
  };

  window.make_csv = make_csv = function(tstart, tend) {
    var csv, d, idx, j, k, l, len, len1, len2, names, ref, ref1, ref2, s, t, text, time, tstr, val;
    csv = {};
    for (idx = j = 0, len = METRICS.length; j < len; idx = ++j) {
      s = METRICS[idx];
      ref = s.data;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        ref1 = ref[k], time = ref1[0], val = ref1[1];
        if (!(time >= tstart && time <= tend)) {
          continue;
        }
        csv[time] || (csv[time] = []);
        csv[time][idx] = val;
      }
    }
    names = [
      (function() {
        var l, len2, results;
        results = [];
        for (l = 0, len2 = METRICS.length; l < len2; l++) {
          s = METRICS[l];
          results.push(s.name);
        }
        return results;
      })()
    ];
    text = "DateTime," + (names.join(",")) + "\n";
    ref2 = Object.keys(csv).sort();
    for (l = 0, len2 = ref2.length; l < len2; l++) {
      t = ref2[l];
      d = new Date(+t);
      tstr = (d.toDateString()) + " " + (d.toTimeString());
      text += tstr + "," + (csv[t].join(",")) + "\n";
    }
    return text;
  };

  window.fmt_time = fmt_time = function(t) {
    var d;
    d = new Date(t);
    return (d.getFullYear()) + "-" + (d.getMonth() + 1) + "-" + (d.getDate()) + "T" + (d.getHours()) + "-" + (d.getMinutes());
  };

  window.make_download = make_download = function() {
    var blob, chart, ref, tend, text, tstart, url;
    console.log("MAKING_DOWNLOAD");
    chart = $('#container').highcharts();
    ref = [chart.axes[0].min, chart.axes[0].max], tstart = ref[0], tend = ref[1];
    text = make_csv(tstart, tend);
    blob = new Blob([text], {
      type: 'application/octet-stream .csv'
    });
    url = URL.createObjectURL(blob);
    return $('#download_link').html("<a href=\"" + url + "\" download=\"metrics-" + (fmt_time(tstart)) + "--to--" + (fmt_time(tend)) + ".csv\">Download metrics.csv</a>");
  };

}).call(this);
